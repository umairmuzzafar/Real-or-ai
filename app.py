import streamlit as st
from transformers import AutoTokenizer, AutoModelForSequenceClassification
import torch
import sys

# Set page config first
st.set_page_config(
    page_title="Real or AI",
    page_icon="🔍",
    layout="wide"
)

# Add error handling for imports
try:
    from transformers import __version__ as transformers_version
    st.sidebar.success(f"Transformers v{transformers_version}")
except Exception as e:
    st.error(f"Error importing transformers: {str(e)}")

# Simple UI
st.title("🔍 Real or AI")
st.write("Detect if text was written by a human or AI")

# Model loading
@st.cache_resource
def load_model():
    try:
        model_name = "roberta-base-openai-detector"
        tokenizer = AutoTokenizer.from_pretrained(model_name)
        model = AutoModelForSequenceClassification.from_pretrained(model_name)
        return model, tokenizer
    except Exception as e:
        st.error(f"Error loading model: {str(e)}")
        return None, None

# Main UI
text = st.text_area("Enter text to analyze:", height=200)

if st.button("Analyze"):
    if not text.strip():
        st.warning("Please enter some text to analyze")
    else:
        with st.spinner("Analyzing..."):
            try:
                model, tokenizer = load_model()
                if model and tokenizer:
                    inputs = tokenizer(text, return_tensors="pt", truncation=True, max_length=512)
                    with torch.no_grad():
                        outputs = model(**inputs)
                    probs = torch.nn.functional.softmax(outputs.logits, dim=-1)
                    human_prob = probs[0][0].item() * 100
                    ai_prob = probs[0][1].item() * 100
                    
                    st.subheader("Results")
                    col1, col2 = st.columns(2)
                    with col1:
                        st.metric("Human", f"{human_prob:.1f}%")
                    with col2:
                        st.metric("AI", f"{ai_prob:.1f}%")
                    
                    if human_prob > ai_prob:
                        st.success("This text is likely human-written")
                    else:
                        st.warning("This text is likely AI-generated")
            except Exception as e:
                st.error(f"Error during analysis: {str(e)}")

# Add some info
st.sidebar.markdown("""
### About
This tool helps detect if text was written by a human or generated by AI.

### How it works
- Uses a fine-tuned RoBERTa model
- Analyzes text patterns and structures
- Provides a confidence score for both human and AI
""")
